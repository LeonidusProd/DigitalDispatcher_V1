version: '3.8'

services:
  backend:
    restart: always
    build:
      context: .
      dockerfile: ./Dockerfile
    image: dd_backend
    container_name: dd_backend
    volumes:
      - dd_back_static:/dd_back/static
      - dd_back_media:/dd_back/media
    expose:
      - "8000"
    env_file:
      - .env
#    depends_on:
#      - postgres
    networks:
      - app-network
    command: >
      sh -c "
      python manage.py migrate &&
      python manage.py loaddata digdispdata.json  &&
      gunicorn backend_config.wsgi -b 0.0.0.0:8000
      "

  frontend:
    restart: always
    build:
      context: ./front/
      dockerfile: ./Dockerfile
    image: dd_frontend
    container_name: dd_frontend
    volumes:
      - dd_front_app:/dd_front
    expose:
      - "8080"
    env_file:
      - .env
#    depends_on:
#      - backend
    networks:
      - app-network
    command: >
      sh -c "
      npm run build && 
      npm run serve
      "

  postgres:
    restart: always
    build:
      context: ./postgres/
      dockerfile: ./Dockerfile
    image: dd_postgres
    container_name: dd_postgres
    env_file:
      - .env
    volumes:
      - dd_postgres_data:/var/lib/postgresql/data/

  nginx:
    restart: always
    build:
      context: ./nginx/
      dockerfile: ./Dockerfile
    image: dd_nginx
    container_name: dd_nginx
    volumes:
      - dd_back_static:/dd_back/static
      - dd_back_media:/dd_back/media
    ports:
      - "80:80"
#    depends_on:
#      - backend
#      - frontend
    networks:
      - app-network

volumes:
  dd_postgres_data:
  dd_back_static:
  dd_back_media:
  dd_front_app:

networks:
  app-network:
#    driver: bridge