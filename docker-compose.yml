services:
  backend:
    build:
      context: .
    container_name: dd_backend
    hostname: dd_backend
    env_file:
      - .env
    volumes:
      - static_dd_back:/app/static
      - media_dd_back:/app/media
    ports:
      - "${BACKEND_HOST_PORT}:${BACKEND_CONTAINER_PORT}"
    command: sh -c "python manage.py collectstatic --no-input &&
      python manage.py migrate &&
      python manage.py loaddata digdispdata.json  &&
      gunicorn backend_config.wsgi --bind ${BACKEND_WSGI_IP}:${BACKEND_CONTAINER_PORT}"
    restart: always
    depends_on:
      - postgres
    networks:
      - net

  nginx:
    build:
      context: nginx
      dockerfile: Dockerfile
    container_name: dd_nginx
    restart: always
    volumes:
      - static_dd_back:/app/static
      - media_dd_back:/app/media
      - dd_front_dist:/app/dist
    env_file:
      - .env
    ports:
      - "${NGINX_HOST_PORT}:${NGINX_CONTAINER_PORT}"
    networks:
      - net
    links:
      - backend
    depends_on:
      - backend

  postgres:
    image: "postgres"
    restart: always
    container_name: dd_postgres
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    env_file:
      - .env
    volumes:
      - "./db_data:/var/lib/postgresql/data"
    networks:
      - net
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"

  frontend:
    restart: always
    build:
      context: ./front/
      dockerfile: ./Dockerfile
    image: dd_frontend
    container_name: dd_frontend
    volumes:
      - dd_front_dist:/app/dist
#    expose:
#      - "${FRONTEND_HOST_PORT}:${FRONTEND_CONTAINER_PORT}"
#    env_file:
#      - .env
    depends_on:
      - backend
    networks:
      - net
#    command: >
#      sh -c "
#      npm run serve
#      "

networks:
  net:
    driver: bridge

volumes:
  static_dd_back:
  media_dd_back:
  db_data:
  dd_front_dist: